name: 3DFrame

on:
    workflow_dispatch:
    push:
        branches:
            - master

jobs:
    build:
        name: Build Image
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v2
              with:
                  submodules: true

            - name: Setup Docker Buildx
              uses: docker/setup-buildx-action@v1

            - name: Cache Docker layers
              uses: actions/cache@v2
              with:
                  path: /tmp/.buildx-cache
                  key: ${{ runner.os }}-buildx-${{ github.sha }}
                  restore-keys: |
                      ${{ runner.os }}-buildx-

            - name: Login to Registry
              uses: docker/login-action@v1
              if: github.event_name != 'pull_request'
              with:
                  registry: ghcr.io
                  username: ${{ secrets.DOCKER_USERNAME }}
                  password: ${{ secrets.DOCKER_PASSWORD }}

            - name: Set Environment
              run: |
                  IMG=threedframe
                  echo "IMG=${IMG}" >> $GITHUB_ENV
                  echo "IMAGE=$(echo ghcr.io/${{ github.repository_owner }}/${IMG} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
                  echo "BUILD_DATE=$(date +'%Y-%m-%d %H:%M:%S')" >> $GITHUB_ENV
                  echo "GIT_SHA=$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_ENV
                  echo "GIT_REF=$(git symbolic-ref -q --short HEAD || git describe --tags --exact-match)" >> $GITHUB_ENV
                  echo "BUILD_VER=1.0.0-alpha.${GITHUB_RUN_NUMBER}" >> $GITHUB_ENV
                  echo "NUM_CORES=$(nproc)" >> $GITHUB_ENV

            - name: Build and Push
              uses: docker/build-push-action@v2
              if: github.event_name != 'pull_request'
              with:
                  context: .
                  file: ./Dockerfile
                  build-args: |
                      NUM_CORES=${{ env.NUM_CORES }}
                  labels: |
                      org.opencontainers.image.authors=${{ github.repository_owner }}
                      org.opencontainers.image.created=${{ env.BUILD_DATE }}
                      org.opencontainers.image.description=Created from commit ${{ env.GIT_SHA }} and ref ${{ env.GIT_REF }}
                      org.opencontainers.image.ref.name=${{ env.GIT_REF }}
                      org.opencontainers.image.revision=${{ github.sha }}
                      org.opencontainers.image.source=https://github.com/${{ github.repository }}
                      org.opencontainers.image.version=${{ env.BUILD_VER }}
                  tags: |
                      ${{ env.IMAGE }}:latest
                      ${{ env.IMAGE }}:${{ env.GIT_REF }}
                      ${{ env.IMAGE }}:${{ env.GIT_SHA }}
                      ${{ env.IMAGE }}:${{ env.BUILD_VER }}
                  push: true
                  cache-from: type=local,src=/tmp/.buildx-cache
                  cache-to: type=local,dest=/tmp/.buildx-cache-new
                  secrets: |
                      GIT_AUTH_TOKEN=${{ secrets.DOCKER_PASSWORD }}

            # Temp fix
            # https://github.com/docker/build-push-action/issues/252
            # https://github.com/moby/buildkit/issues/1896
            - name: Move cache
              run: |
                  rm -rf /tmp/.buildx-cache
                  mv /tmp/.buildx-cache-new /tmp/.buildx-cache

    render:
        name: Render Joints (Worker ${{ matrix.worker }}@${{ matrix.scale }} Scale)
        runs-on: ubuntu-latest
        strategy:
            fail-fast: false
            matrix:
                worker: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
                scale: [0.25]
        steps:
            - name: Checkout
              uses: actions/checkout@v2
              with:
                  submodules: true

            - name: Login to Registry
              uses: docker/login-action@v1
              with:
                  registry: ghcr.io
                  username: ${{ secrets.DOCKER_USERNAME }}
                  password: ${{ secrets.DOCKER_PASSWORD }}

            - name: Determine Targets
              run: |
                  mkdir -p renders
                  WORKER_NUM="${{ matrix.worker }}"
                  ROOT=$(git rev-parse --show-toplevel)
                  DATA_PATH="${ROOT}/data/cybersticksv2.json"
                  # Grab vertex count.
                  _VERT_COUNT=$(cat "$DATA_PATH" | jq -r '.num_vertices')
                  #: 0 indexed
                  VERT_COUNT=$(expr $_VERT_COUNT - 1)
                  # Chunk
                  VERT_RANGE=$(seq 0 $VERT_COUNT)
                  # Selected vertices
                  declare -a VERTS
                  readarray -t VERTS < <(xargs -n 10 <<<$VERT_RANGE | awk "{print \$${WORKER_NUM}}")
                  printf "Selected Vertices:\n"
                  declare -p VERTS
                  declare -a VERT_FLAGS
                  for v in "${VERTS[@]}"
                  do
                    if [[ -n "${v// /}" ]]; then
                        VERT_FLAGS+="-v $v "
                    fi
                  done
                  echo "VERTS=${VERT_FLAGS[*]}" >> $GITHUB_ENV

            - name: Build
              run: docker run --rm --entrypoint /app/threedframe/cli.py -v $(pwd):/app/ ghcr.io/arroyodev-llc/threedframe:latest generate data/cybersticksv2.json ${{ join(env.VERTS, ' ') }} --render --scale ${{ matrix.scale }}

            - name: Upload Renders
              uses: actions/upload-artifact@v2
              with:
                  name: renders-${{ matrix.worker }}-${{ matrix.scale }}scale
                  path: ./renders
